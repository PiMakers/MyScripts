# Local filesystem mounting			-*- shell-script -*-

#
# This script overrides nfs_mount_root() in /scripts/nfs
# and mounts root as a read-only filesystem with a temporary (rw)
# overlay filesystem.
#

. /scripts/nfs

nfs_mount_root()
{
	log_begin_msg "================= Pepe's nfs mount "=================\n"
	nfs_top

	# For DHCP
	modprobe af_packet

	wait_for_udev 10

	# Default delay is around 180s
	delay=${ROOTDELAY:-180}

	# CHANGES TO THE ORIGINAL FUNCTION BEGIN HERE
	# N.B. this code still lacks error checking

	# Create directories for root and the overlay
	mkdir /lower /upper

	# Mount read-only root to /lower
	orig_rootmnt=${rootmnt}
	rootmnt=/lower
	# loop until nfsmount succeeds
	nfs_mount_root_impl
	ret=$?
	echo "ret=$ret"
	nfs_retry_count=0
	while [ ${nfs_retry_count} -lt "${delay}" ] \
		&& [ $ret -ne 0 ] ; do
		[ "$quiet" != "y" ] log_begin_msg "Retrying nfs mount"
		sleep 1 || log_begin_msg "could not sleep"
		nfs_mount_root_impl
		ret=$?
		nfs_retry_count=$(( nfs_retry_count + 1 ))
		[ "$quiet" != "y" ] && log_end_msg
	done
	
	modprobe overlay || insmod "/lower/lib/modules/$(uname -r)/kernel/fs/overlayfs/overlay.ko" \
	|| _log_msg " ================= CANNOT MODPROBE OVERLAY ================= "
	
	# Mount a tmpfs for the overlay in /upper
	mount -t tmpfs tmpfs /upper
	mkdir /upper/data /upper/work
	
	# Mount the final overlay-root in $rootmnt
	rootmnt=${orig_rootmnt}
	mount -t overlay \
	    -olowerdir=/lower,upperdir=/upper/data,workdir=/upper/work \
	    overlay ${rootmnt}
	log_end_msg "================= Booted with overlayfs =========================="
}
